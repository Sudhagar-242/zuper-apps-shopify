<link rel="stylesheet" href="{{ 'section-custom-counter.css' | asset_url }}" media="print" onload="this.media='all'">

<div class="counter-section">
  {% for block in section.blocks %}
    {% assign speed = block.settings.speed_value %}
    {% assign count = block.settings.count_value %}
    {% assign content = block.settings.content %}
    {% assign value_appender = block.settings.value_appender %}
    {% assign increment = block.settings.increment %}

    <div class="counter-block">
      <div class="counter-number">
        <span
          class="counter_custom_value"
          data-increment="{{ increment }}"
          data-speed="{{ speed }}"
          data-value="{{ count }}"
          >0</span
        >
        <span>{{ value_appender }}</span>
      </div>
      <div class="counter-label">{{ content }}</div>
    </div>

    {% unless forloop.last %}
      <div class="divider">
        <h1 style="display: none">Hello</h1>
      </div>
    {% endunless %}
  {% endfor %}
</div>

<script>
  document.addEventListener('DOMContentLoaded', function () {
    const counters = document.querySelectorAll('.counter_custom_value');

    function startCounter(item) {
      const target = parseFloat(item.getAttribute('data-value'));
      const speed = parseInt(item.getAttribute('data-speed')) || 10;
      const increment = parseFloat(item.getAttribute('data-increment')) || 1;

      let count = 0;

      function update() {
        if (count < target) {
          count += increment;
          if (count > target) count = target; // prevent overshoot
          item.textContent = Number.isInteger(count) ? count : count.toFixed(1);
          setTimeout(update, speed);
        } else {
          item.textContent = Number.isInteger(target) ? target : target.toFixed(1);
        }
      }

      update();
    }

    const observer = new IntersectionObserver(
      (entries, obs) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            startCounter(entry.target);
            obs.unobserve(entry.target);
          }
        });
      },
      { threshold: 0.5 }
    );

    counters.forEach((counter) => {
      observer.observe(counter);
    });
  });
</script>

{% schema %}
{
  "name": "Custom Counter Column",
  "tag": "section",
  "class": "counter_class",
  "settings": [],
  "blocks": [
    {
      "type": "counter_column",
      "name": "Counter Block",
      "settings": [
        {
          "type": "text",
          "id": "value_appender",
          "label": "Value Appender",
          "default": "+"
        },
        {
          "type": "text",
          "id": "content",
          "label": "Content",
          "default": "Type Your Content"
        },
        {
          "type": "number",
          "id": "count_value",
          "label": "Count Value",
          "default": 100
        },
        {
          "type": "number",
          "id": "speed_value",
          "label": "Speed Value in ms",
          "default": 10
        },
        {
          "type": "number",
          "id": "increment",
          "label": "Increment Value",
          "default": 1
        }
      ]
    }
  ],
  "presets": [{ "name": "Custom Counter Column" }]
}
{% endschema %}
